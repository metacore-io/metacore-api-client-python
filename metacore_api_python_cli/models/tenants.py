# coding: utf-8

"""
    Metacore IoT Object Storage API

    Metacore Object Storage - IOT Core Services  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Tenants(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'TenantsId',
        'name': 'str',
        'organization_id': 'OrganizationsId',
        'subscription_key': 'str',
        'subscription_limit': 'int'
    }

    attribute_map = {
        'id': '_id',
        'name': 'name',
        'organization_id': 'organizationId',
        'subscription_key': 'subscriptionKey',
        'subscription_limit': 'subscriptionLimit'
    }

    def __init__(self, id=None, name=None, organization_id=None, subscription_key=None, subscription_limit=None):  # noqa: E501
        """Tenants - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._organization_id = None
        self._subscription_key = None
        self._subscription_limit = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        if organization_id is not None:
            self.organization_id = organization_id
        self.subscription_key = subscription_key
        self.subscription_limit = subscription_limit

    @property
    def id(self):
        """Gets the id of this Tenants.  # noqa: E501


        :return: The id of this Tenants.  # noqa: E501
        :rtype: TenantsId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tenants.


        :param id: The id of this Tenants.  # noqa: E501
        :type: TenantsId
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Tenants.  # noqa: E501


        :return: The name of this Tenants.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Tenants.


        :param name: The name of this Tenants.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def organization_id(self):
        """Gets the organization_id of this Tenants.  # noqa: E501


        :return: The organization_id of this Tenants.  # noqa: E501
        :rtype: OrganizationsId
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this Tenants.


        :param organization_id: The organization_id of this Tenants.  # noqa: E501
        :type: OrganizationsId
        """

        self._organization_id = organization_id

    @property
    def subscription_key(self):
        """Gets the subscription_key of this Tenants.  # noqa: E501


        :return: The subscription_key of this Tenants.  # noqa: E501
        :rtype: str
        """
        return self._subscription_key

    @subscription_key.setter
    def subscription_key(self, subscription_key):
        """Sets the subscription_key of this Tenants.


        :param subscription_key: The subscription_key of this Tenants.  # noqa: E501
        :type: str
        """
        if subscription_key is None:
            raise ValueError("Invalid value for `subscription_key`, must not be `None`")  # noqa: E501

        self._subscription_key = subscription_key

    @property
    def subscription_limit(self):
        """Gets the subscription_limit of this Tenants.  # noqa: E501


        :return: The subscription_limit of this Tenants.  # noqa: E501
        :rtype: int
        """
        return self._subscription_limit

    @subscription_limit.setter
    def subscription_limit(self, subscription_limit):
        """Sets the subscription_limit of this Tenants.


        :param subscription_limit: The subscription_limit of this Tenants.  # noqa: E501
        :type: int
        """
        if subscription_limit is None:
            raise ValueError("Invalid value for `subscription_limit`, must not be `None`")  # noqa: E501

        self._subscription_limit = subscription_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Tenants, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tenants):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
