# coding: utf-8

"""
    Metacore IoT Object Storage API

    Metacore Object Storage - IOT Core Services  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Oplog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'c': 'Object',
        'i': 'Object',
        'ip': 'Object',
        'o': 'Object',
        'r': 'Object',
        'u': 'Object'
    }

    attribute_map = {
        'id': '_id',
        'c': 'c',
        'i': 'i',
        'ip': 'ip',
        'o': 'o',
        'r': 'r',
        'u': 'u'
    }

    def __init__(self, id=None, c=None, i=None, ip=None, o=None, r=None, u=None):  # noqa: E501
        """Oplog - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._c = None
        self._i = None
        self._ip = None
        self._o = None
        self._r = None
        self._u = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if c is not None:
            self.c = c
        if i is not None:
            self.i = i
        if ip is not None:
            self.ip = ip
        if o is not None:
            self.o = o
        if r is not None:
            self.r = r
        if u is not None:
            self.u = u

    @property
    def id(self):
        """Gets the id of this Oplog.  # noqa: E501


        :return: The id of this Oplog.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Oplog.


        :param id: The id of this Oplog.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def c(self):
        """Gets the c of this Oplog.  # noqa: E501


        :return: The c of this Oplog.  # noqa: E501
        :rtype: Object
        """
        return self._c

    @c.setter
    def c(self, c):
        """Sets the c of this Oplog.


        :param c: The c of this Oplog.  # noqa: E501
        :type: Object
        """

        self._c = c

    @property
    def i(self):
        """Gets the i of this Oplog.  # noqa: E501


        :return: The i of this Oplog.  # noqa: E501
        :rtype: Object
        """
        return self._i

    @i.setter
    def i(self, i):
        """Sets the i of this Oplog.


        :param i: The i of this Oplog.  # noqa: E501
        :type: Object
        """

        self._i = i

    @property
    def ip(self):
        """Gets the ip of this Oplog.  # noqa: E501


        :return: The ip of this Oplog.  # noqa: E501
        :rtype: Object
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this Oplog.


        :param ip: The ip of this Oplog.  # noqa: E501
        :type: Object
        """

        self._ip = ip

    @property
    def o(self):
        """Gets the o of this Oplog.  # noqa: E501


        :return: The o of this Oplog.  # noqa: E501
        :rtype: Object
        """
        return self._o

    @o.setter
    def o(self, o):
        """Sets the o of this Oplog.


        :param o: The o of this Oplog.  # noqa: E501
        :type: Object
        """

        self._o = o

    @property
    def r(self):
        """Gets the r of this Oplog.  # noqa: E501


        :return: The r of this Oplog.  # noqa: E501
        :rtype: Object
        """
        return self._r

    @r.setter
    def r(self, r):
        """Sets the r of this Oplog.


        :param r: The r of this Oplog.  # noqa: E501
        :type: Object
        """

        self._r = r

    @property
    def u(self):
        """Gets the u of this Oplog.  # noqa: E501


        :return: The u of this Oplog.  # noqa: E501
        :rtype: Object
        """
        return self._u

    @u.setter
    def u(self, u):
        """Sets the u of this Oplog.


        :param u: The u of this Oplog.  # noqa: E501
        :type: Object
        """

        self._u = u

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Oplog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Oplog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
