# coding: utf-8

"""
    Metacore IoT Object Storage API

    Metacore Object Storage - IOT Core Services  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Devices(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'DevicesId',
        'hardwares': 'list[str]',
        'info': 'DevicesInfo',
        'location': 'DevicesLocation',
        'name': 'str',
        'organization_id': 'OrganizationsId',
        'region_id': 'RegionsId',
        'sensors': 'list[str]',
        'tenant_id': 'TenantsId',
        'type_id': 'DeviceTypesId'
    }

    attribute_map = {
        'id': '_id',
        'hardwares': 'hardwares',
        'info': 'info',
        'location': 'location',
        'name': 'name',
        'organization_id': 'organizationId',
        'region_id': 'regionId',
        'sensors': 'sensors',
        'tenant_id': 'tenantId',
        'type_id': 'typeId'
    }

    def __init__(self, id=None, hardwares=None, info=None, location=None, name=None, organization_id=None, region_id=None, sensors=None, tenant_id=None, type_id=None):  # noqa: E501
        """Devices - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._hardwares = None
        self._info = None
        self._location = None
        self._name = None
        self._organization_id = None
        self._region_id = None
        self._sensors = None
        self._tenant_id = None
        self._type_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if hardwares is not None:
            self.hardwares = hardwares
        if info is not None:
            self.info = info
        if location is not None:
            self.location = location
        self.name = name
        if organization_id is not None:
            self.organization_id = organization_id
        self.region_id = region_id
        if sensors is not None:
            self.sensors = sensors
        self.tenant_id = tenant_id
        self.type_id = type_id

    @property
    def id(self):
        """Gets the id of this Devices.  # noqa: E501


        :return: The id of this Devices.  # noqa: E501
        :rtype: DevicesId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Devices.


        :param id: The id of this Devices.  # noqa: E501
        :type: DevicesId
        """

        self._id = id

    @property
    def hardwares(self):
        """Gets the hardwares of this Devices.  # noqa: E501


        :return: The hardwares of this Devices.  # noqa: E501
        :rtype: list[str]
        """
        return self._hardwares

    @hardwares.setter
    def hardwares(self, hardwares):
        """Sets the hardwares of this Devices.


        :param hardwares: The hardwares of this Devices.  # noqa: E501
        :type: list[str]
        """

        self._hardwares = hardwares

    @property
    def info(self):
        """Gets the info of this Devices.  # noqa: E501


        :return: The info of this Devices.  # noqa: E501
        :rtype: DevicesInfo
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this Devices.


        :param info: The info of this Devices.  # noqa: E501
        :type: DevicesInfo
        """

        self._info = info

    @property
    def location(self):
        """Gets the location of this Devices.  # noqa: E501


        :return: The location of this Devices.  # noqa: E501
        :rtype: DevicesLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Devices.


        :param location: The location of this Devices.  # noqa: E501
        :type: DevicesLocation
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this Devices.  # noqa: E501


        :return: The name of this Devices.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Devices.


        :param name: The name of this Devices.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def organization_id(self):
        """Gets the organization_id of this Devices.  # noqa: E501


        :return: The organization_id of this Devices.  # noqa: E501
        :rtype: OrganizationsId
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this Devices.


        :param organization_id: The organization_id of this Devices.  # noqa: E501
        :type: OrganizationsId
        """

        self._organization_id = organization_id

    @property
    def region_id(self):
        """Gets the region_id of this Devices.  # noqa: E501


        :return: The region_id of this Devices.  # noqa: E501
        :rtype: RegionsId
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this Devices.


        :param region_id: The region_id of this Devices.  # noqa: E501
        :type: RegionsId
        """
        if region_id is None:
            raise ValueError("Invalid value for `region_id`, must not be `None`")  # noqa: E501

        self._region_id = region_id

    @property
    def sensors(self):
        """Gets the sensors of this Devices.  # noqa: E501


        :return: The sensors of this Devices.  # noqa: E501
        :rtype: list[str]
        """
        return self._sensors

    @sensors.setter
    def sensors(self, sensors):
        """Sets the sensors of this Devices.


        :param sensors: The sensors of this Devices.  # noqa: E501
        :type: list[str]
        """

        self._sensors = sensors

    @property
    def tenant_id(self):
        """Gets the tenant_id of this Devices.  # noqa: E501


        :return: The tenant_id of this Devices.  # noqa: E501
        :rtype: TenantsId
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this Devices.


        :param tenant_id: The tenant_id of this Devices.  # noqa: E501
        :type: TenantsId
        """
        if tenant_id is None:
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")  # noqa: E501

        self._tenant_id = tenant_id

    @property
    def type_id(self):
        """Gets the type_id of this Devices.  # noqa: E501


        :return: The type_id of this Devices.  # noqa: E501
        :rtype: DeviceTypesId
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this Devices.


        :param type_id: The type_id of this Devices.  # noqa: E501
        :type: DeviceTypesId
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")  # noqa: E501

        self._type_id = type_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Devices, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Devices):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
