# coding: utf-8

"""
    Metacore IoT Object Storage API

    Metacore Object Storage - IOT Core Services  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class OrganizationDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'balance': 'int',
        'category': 'str',
        'contact_type': 'str',
        'iban': 'str',
        'organization_id': 'OrganizationsId',
        'subscription_end_date_time': 'datetime',
        'type': 'str'
    }

    attribute_map = {
        'id': '_id',
        'balance': 'balance',
        'category': 'category',
        'contact_type': 'contactType',
        'iban': 'iban',
        'organization_id': 'organizationId',
        'subscription_end_date_time': 'subscriptionEndDateTime',
        'type': 'type'
    }

    def __init__(self, id=None, balance=None, category=None, contact_type=None, iban=None, organization_id=None, subscription_end_date_time=None, type=None):  # noqa: E501
        """OrganizationDetails - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._balance = None
        self._category = None
        self._contact_type = None
        self._iban = None
        self._organization_id = None
        self._subscription_end_date_time = None
        self._type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if balance is not None:
            self.balance = balance
        if category is not None:
            self.category = category
        if contact_type is not None:
            self.contact_type = contact_type
        if iban is not None:
            self.iban = iban
        if organization_id is not None:
            self.organization_id = organization_id
        if subscription_end_date_time is not None:
            self.subscription_end_date_time = subscription_end_date_time
        if type is not None:
            self.type = type

    @property
    def id(self):
        """Gets the id of this OrganizationDetails.  # noqa: E501


        :return: The id of this OrganizationDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrganizationDetails.


        :param id: The id of this OrganizationDetails.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def balance(self):
        """Gets the balance of this OrganizationDetails.  # noqa: E501


        :return: The balance of this OrganizationDetails.  # noqa: E501
        :rtype: int
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this OrganizationDetails.


        :param balance: The balance of this OrganizationDetails.  # noqa: E501
        :type: int
        """

        self._balance = balance

    @property
    def category(self):
        """Gets the category of this OrganizationDetails.  # noqa: E501


        :return: The category of this OrganizationDetails.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this OrganizationDetails.


        :param category: The category of this OrganizationDetails.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def contact_type(self):
        """Gets the contact_type of this OrganizationDetails.  # noqa: E501


        :return: The contact_type of this OrganizationDetails.  # noqa: E501
        :rtype: str
        """
        return self._contact_type

    @contact_type.setter
    def contact_type(self, contact_type):
        """Sets the contact_type of this OrganizationDetails.


        :param contact_type: The contact_type of this OrganizationDetails.  # noqa: E501
        :type: str
        """

        self._contact_type = contact_type

    @property
    def iban(self):
        """Gets the iban of this OrganizationDetails.  # noqa: E501


        :return: The iban of this OrganizationDetails.  # noqa: E501
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this OrganizationDetails.


        :param iban: The iban of this OrganizationDetails.  # noqa: E501
        :type: str
        """

        self._iban = iban

    @property
    def organization_id(self):
        """Gets the organization_id of this OrganizationDetails.  # noqa: E501


        :return: The organization_id of this OrganizationDetails.  # noqa: E501
        :rtype: OrganizationsId
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this OrganizationDetails.


        :param organization_id: The organization_id of this OrganizationDetails.  # noqa: E501
        :type: OrganizationsId
        """

        self._organization_id = organization_id

    @property
    def subscription_end_date_time(self):
        """Gets the subscription_end_date_time of this OrganizationDetails.  # noqa: E501


        :return: The subscription_end_date_time of this OrganizationDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._subscription_end_date_time

    @subscription_end_date_time.setter
    def subscription_end_date_time(self, subscription_end_date_time):
        """Sets the subscription_end_date_time of this OrganizationDetails.


        :param subscription_end_date_time: The subscription_end_date_time of this OrganizationDetails.  # noqa: E501
        :type: datetime
        """

        self._subscription_end_date_time = subscription_end_date_time

    @property
    def type(self):
        """Gets the type of this OrganizationDetails.  # noqa: E501


        :return: The type of this OrganizationDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrganizationDetails.


        :param type: The type of this OrganizationDetails.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganizationDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
