# coding: utf-8

"""
    Metacore IoT Object Storage API

    Metacore Object Storage - IOT Core Services  # noqa: E501

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Sensors(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'measurement_name': 'str',
        'measures': 'list[str]',
        'name': 'str',
        'sensor_brand': 'str',
        'sensor_model': 'str'
    }

    attribute_map = {
        'id': '_id',
        'measurement_name': 'measurement_name',
        'measures': 'measures',
        'name': 'name',
        'sensor_brand': 'sensor_brand',
        'sensor_model': 'sensor_model'
    }

    def __init__(self, id=None, measurement_name=None, measures=None, name=None, sensor_brand=None, sensor_model=None):  # noqa: E501
        """Sensors - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._measurement_name = None
        self._measures = None
        self._name = None
        self._sensor_brand = None
        self._sensor_model = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if measurement_name is not None:
            self.measurement_name = measurement_name
        if measures is not None:
            self.measures = measures
        self.name = name
        if sensor_brand is not None:
            self.sensor_brand = sensor_brand
        if sensor_model is not None:
            self.sensor_model = sensor_model

    @property
    def id(self):
        """Gets the id of this Sensors.  # noqa: E501


        :return: The id of this Sensors.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Sensors.


        :param id: The id of this Sensors.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def measurement_name(self):
        """Gets the measurement_name of this Sensors.  # noqa: E501


        :return: The measurement_name of this Sensors.  # noqa: E501
        :rtype: str
        """
        return self._measurement_name

    @measurement_name.setter
    def measurement_name(self, measurement_name):
        """Sets the measurement_name of this Sensors.


        :param measurement_name: The measurement_name of this Sensors.  # noqa: E501
        :type: str
        """

        self._measurement_name = measurement_name

    @property
    def measures(self):
        """Gets the measures of this Sensors.  # noqa: E501


        :return: The measures of this Sensors.  # noqa: E501
        :rtype: list[str]
        """
        return self._measures

    @measures.setter
    def measures(self, measures):
        """Sets the measures of this Sensors.


        :param measures: The measures of this Sensors.  # noqa: E501
        :type: list[str]
        """

        self._measures = measures

    @property
    def name(self):
        """Gets the name of this Sensors.  # noqa: E501


        :return: The name of this Sensors.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Sensors.


        :param name: The name of this Sensors.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def sensor_brand(self):
        """Gets the sensor_brand of this Sensors.  # noqa: E501


        :return: The sensor_brand of this Sensors.  # noqa: E501
        :rtype: str
        """
        return self._sensor_brand

    @sensor_brand.setter
    def sensor_brand(self, sensor_brand):
        """Sets the sensor_brand of this Sensors.


        :param sensor_brand: The sensor_brand of this Sensors.  # noqa: E501
        :type: str
        """

        self._sensor_brand = sensor_brand

    @property
    def sensor_model(self):
        """Gets the sensor_model of this Sensors.  # noqa: E501


        :return: The sensor_model of this Sensors.  # noqa: E501
        :rtype: str
        """
        return self._sensor_model

    @sensor_model.setter
    def sensor_model(self, sensor_model):
        """Sets the sensor_model of this Sensors.


        :param sensor_model: The sensor_model of this Sensors.  # noqa: E501
        :type: str
        """

        self._sensor_model = sensor_model

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Sensors, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Sensors):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
