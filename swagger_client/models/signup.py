# coding: utf-8

"""
    Metacore IoT Object Storage API

    Metacore Object Storage - IOT Core Services  # noqa: E501

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Signup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'email': 'str',
        'firstname': 'str',
        'is_active': 'bool',
        'lastname': 'str',
        'orgname': 'str',
        'role_id': 'str'
    }

    attribute_map = {
        'id': '_id',
        'email': 'email',
        'firstname': 'firstname',
        'is_active': 'isActive',
        'lastname': 'lastname',
        'orgname': 'orgname',
        'role_id': 'roleId'
    }

    def __init__(self, id=None, email=None, firstname=None, is_active=False, lastname=None, orgname=None, role_id='5b8eb4dda242000001971632'):  # noqa: E501
        """Signup - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._email = None
        self._firstname = None
        self._is_active = None
        self._lastname = None
        self._orgname = None
        self._role_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.email = email
        self.firstname = firstname
        if is_active is not None:
            self.is_active = is_active
        self.lastname = lastname
        self.orgname = orgname
        if role_id is not None:
            self.role_id = role_id

    @property
    def id(self):
        """Gets the id of this Signup.  # noqa: E501


        :return: The id of this Signup.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Signup.


        :param id: The id of this Signup.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def email(self):
        """Gets the email of this Signup.  # noqa: E501


        :return: The email of this Signup.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Signup.


        :param email: The email of this Signup.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def firstname(self):
        """Gets the firstname of this Signup.  # noqa: E501


        :return: The firstname of this Signup.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this Signup.


        :param firstname: The firstname of this Signup.  # noqa: E501
        :type: str
        """
        if firstname is None:
            raise ValueError("Invalid value for `firstname`, must not be `None`")  # noqa: E501

        self._firstname = firstname

    @property
    def is_active(self):
        """Gets the is_active of this Signup.  # noqa: E501


        :return: The is_active of this Signup.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Signup.


        :param is_active: The is_active of this Signup.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def lastname(self):
        """Gets the lastname of this Signup.  # noqa: E501


        :return: The lastname of this Signup.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this Signup.


        :param lastname: The lastname of this Signup.  # noqa: E501
        :type: str
        """
        if lastname is None:
            raise ValueError("Invalid value for `lastname`, must not be `None`")  # noqa: E501

        self._lastname = lastname

    @property
    def orgname(self):
        """Gets the orgname of this Signup.  # noqa: E501


        :return: The orgname of this Signup.  # noqa: E501
        :rtype: str
        """
        return self._orgname

    @orgname.setter
    def orgname(self, orgname):
        """Sets the orgname of this Signup.


        :param orgname: The orgname of this Signup.  # noqa: E501
        :type: str
        """
        if orgname is None:
            raise ValueError("Invalid value for `orgname`, must not be `None`")  # noqa: E501

        self._orgname = orgname

    @property
    def role_id(self):
        """Gets the role_id of this Signup.  # noqa: E501


        :return: The role_id of this Signup.  # noqa: E501
        :rtype: str
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this Signup.


        :param role_id: The role_id of this Signup.  # noqa: E501
        :type: str
        """

        self._role_id = role_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Signup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Signup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
